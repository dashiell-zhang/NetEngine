@page "/information/category"
@using Site.Model.Article
@attribute [ReuseTabsPageTitle("栏目管理")]

<Layout Style="padding-top:30px;">

    <Content Class="site-layout-background">

        <div style="margin-bottom:10px">

            @if (MainLayout.functionList.Contains("category-add"))
            {
                <Button Icon="plus" Type="@ButtonType.Primary" @onclick="()=>EditCategory()">添加</Button>
            }

        </div>
        <Table TItem="DtoCategory" DataSource="@pageList.List" Total="@pageList.Total" Loading="tableLoading" RemoteDataSource>

            <ColumnDefinitions>

                <PropertyColumn Property="c=>c.Name" Title="名称"></PropertyColumn>
                <PropertyColumn Property="c=>c.Remarks" Title="备注"></PropertyColumn>
                <PropertyColumn Property="c=>c.ParentName" Title="父级栏目"></PropertyColumn>
                <PropertyColumn Property="c=>c.Sort" Title="排序"></PropertyColumn>
                <PropertyColumn Property="c=>c.CreateTime.LocalDateTime" Format="yyyy-MM-dd HH:mm" Title="创建时间"></PropertyColumn>
                <ActionColumn Title="操作">
                    <Space>

                        @if (MainLayout.functionList.Contains("category-edit"))
                        {
                            <SpaceItem>
                                <a @onclick="()=>EditCategory(context)">编辑</a>
                            </SpaceItem>
                        }

                        @if (MainLayout.functionList.Contains("category-delete"))
                        {
                            <SpaceItem>
                                <Popconfirm Title="确认要删除吗？"
                                            OnConfirm="_=>DeleteCategory(context.Id)"
                                            OkText="Yes"
                                            CancelText="No">
                                    <a style="color:red">删除</a>
                                </Popconfirm>

                            </SpaceItem>
                        }

                    </Space>
                </ActionColumn>
            </ColumnDefinitions>

            <PaginationTemplate>
                <div style="margin:15px 0;float:right">
                    <Pagination Total="@pageList.Total" PageSize="pageSize" Current="pageNum" ShowSizeChanger OnChange="PageChange" ShowQuickJumper ShowTotal="showTotal" />
                </div>
            </PaginationTemplate>

        </Table>

    </Content>
</Layout>


<Drawer Closable="true" Width="380" Visible="isShowEditCategory" Title='("栏目信息")' OnClose="()=>isShowEditCategory=false">
    <Template style="height:90%">

        <Form Model="@editCategory" OnFinish="SaveCategory">

            <FormItem>
                <Text>名称</Text>
                <Input Placeholder="请输入名称" @bind-Value="@context.Name" />
            </FormItem>


            <FormItem>
                <Text>父级栏目</Text>
                <TreeSelect TItem="DtoTreeSelect" TItemValue="string" Style="width:100%;" DataSource="selectCategoryList" @bind-Value="@parentId" Placeholder="请选择父级栏目" TreeDefaultExpandAll ChildrenExpression="node=>node.DataItem.Children" DisabledExpression="node=>node.DataItem.IsDisabled" TitleExpression="node=>node.DataItem.Title" KeyExpression="node=>node.DataItem.Key" IsLeafExpression="node=>node.DataItem.Children==null"></TreeSelect>
            </FormItem>


            <FormItem>
                <Text>备注</Text>
                <Input Placeholder=" 请输入备注" @bind-Value="@context.Remarks" />
            </FormItem>


            <FormItem>
                <Text>排序</Text>
                <Input Placeholder="请输入排序值" Type="number" @bind-Value="@context.Sort" />
            </FormItem>


            <Row Gutter="24">
                <AntDesign.Col Span="24">
                    <div style="float:right">
                        <Button Type="@ButtonType.Primary" HtmlType="submit" Loading="@saveLoading">保存</Button>
                        <Button Type="@ButtonType.Default" @onclick="()=>isShowEditCategory=false">取消</Button>
                    </div>
                </AntDesign.Col>
            </Row>
        </Form>
    </Template>
</Drawer>


@code {

    private string parentId = "0";


    List<DtoTreeSelect>? selectCategoryList = new();

    override protected void OnInitialized()
    {
        GetCategoryTreeList();
    }

    override protected void OnParametersSet()
    {
        GetCategoryList();
        GetCategoryTreeList();
    }


    async Task GetCategoryTreeList()
    {
        List<DtoKeyValueChild> parentKVList = new();


        parentKVList.Add(new DtoKeyValueChild { Key = 0, Value = "无父级栏目" });



        var kvList = await Http.GetFromJsonAsync<List<DtoKeyValueChild>>("Article/GetCategoryTreeList");

        if (kvList != null)
        {
            parentKVList.AddRange(kvList);

            selectCategoryList = CategoryTreeConvert(parentKVList)!.ToList();
        }

    }

    private IEnumerable<DtoTreeSelect>? CategoryTreeConvert(List<DtoKeyValueChild>? keyValueChildren)
    {
        return keyValueChildren?.Select(t => new DtoTreeSelect
            {
                Key = t.Key.ToString()!,
                Title = t.Value!.ToString()!,
                Children = CategoryTreeConvert(t.ChildList),
                IsDisabled = (categoryId.ToString() == t.Key.ToString() && categoryId.ToString() != "0")
            }).ToList();
    }

    bool saveLoading = false;


    bool tableLoading = false;
    int pageNum = 1;
    int pageSize = 10;
    DtoPageList<DtoCategory> pageList = new();

    async Task GetCategoryList()
    {
        tableLoading = true;
        var retData = await Http.GetFromJsonAsync<DtoPageList<DtoCategory>>("Article/GetCategoryList?pageNum=" + pageNum + "&pageSize=" + pageSize);

        if (retData != null)
        {
            pageList = retData;
        }

        tableLoading = false;
        StateHasChanged();
    }

    void PageChange(PaginationEventArgs args)
    {
        if (pageNum != args.Page)
        {
            pageNum = args.Page;
        }

        if (pageSize != args.PageSize)
        {
            pageSize = args.PageSize;
        }

        GetCategoryList();
    }

    Func<PaginationTotalContext, string> showTotal = pageList => $"共 {pageList.Total} 条";


    bool isShowEditCategory = false;
    DtoEditCategory editCategory = new();
    long categoryId;


    async Task EditCategory(DtoCategory? category = null)
    {
        editCategory = new();
        categoryId = default;

        GetCategoryTreeList();

        if (category != null)
        {
            categoryId = category.Id;
            editCategory.Name = category.Name;
            editCategory.Remarks = category.Remarks;
            editCategory.Sort = category.Sort;

            if (category.ParentId == null)
            {
                editCategory.ParentId = 0;
            }
            else
            {
                editCategory.ParentId = category.ParentId;
            }

            parentId = editCategory.ParentId.Value.ToString();
        }
        else
        {
            editCategory.Sort = 99;
        }

        await Task.Delay(200);

        isShowEditCategory = true;

        StateHasChanged();
    }

    async Task SaveCategory()
    {
        saveLoading = true;

        if (parentId == "0")
        {
            editCategory.ParentId = null;
        }
        else
        {
            editCategory.ParentId = long.Parse(parentId);
        }

        if (categoryId == default)
        {
            using var httpResponse = await Http.PostAsJsonAsync<DtoEditCategory>("Article/CreateCategory", editCategory);
            if (httpResponse.IsSuccessStatusCode)
            {
                var createCategoryId = httpResponse.Content.ReadAsStringAsync().Result;

                Message.Success("添加成功");
            }
        }
        else
        {
            using var httpResponse = await Http.PostAsJsonAsync<DtoEditCategory>("Article/UpdateCategory?categoryId=" + categoryId, editCategory);

            if (httpResponse.IsSuccessStatusCode)
            {
                var updateCategoryRet = httpResponse.Content.ReadAsStringAsync().Result;

                if (bool.Parse(updateCategoryRet))
                {
                    Message.Success("编辑成功");
                }
            }
        }

        saveLoading = false;

        GetCategoryList();
        isShowEditCategory = false;
    }


    async Task DeleteCategory(long categoryId)
    {
        using var httpResponse = await Http.DeleteAsync("Article/DeleteCategory?id=" + categoryId);
        if (httpResponse.IsSuccessStatusCode)
        {
            var retValue = httpResponse.Content.ReadAsStringAsync().Result;

            if (Convert.ToBoolean(retValue))
            {
                GetCategoryList();
                Message.Success("删除成功");
            }
        }
    }


}
